abstract class Vehicle {
    protected String make;
    protected String model;
    protected int year;
    protected String fuelType;

    public Vehicle(String make, String model, int year, String fuelType) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.fuelType = fuelType;
    }

    public abstract double calculateFuelEfficiency();
    public abstract void displayDetails();
}

class Car extends Vehicle {
    private int numberOfDoors;

    public Car(String make, String model, int year, String fuelType, int numberOfDoors) {
        super(make, model, year, fuelType);
        this.numberOfDoors = numberOfDoors;
    }

    public double calculateFuelEfficiency() {
        return 15.0; // Placeholder value
    }

    public void displayDetails() {
        System.out.println("Car Details:");
        System.out.println("Make: " + make + ", Model: " + model + ", Year: " + year + ", Fuel Type: " + fuelType);
        System.out.println("Number of Doors: " + numberOfDoors);
    }
}

class Truck extends Vehicle {
    private double payloadCapacity;

    public Truck(String make, String model, int year, String fuelType, double payloadCapacity) {
        super(make, model, year, fuelType);
        this.payloadCapacity = payloadCapacity;
    }

    public double calculateFuelEfficiency() {
        return 8.0; // Placeholder value
    }

    public void displayDetails() {
        System.out.println("Truck Details:");
        System.out.println("Make: " + make + ", Model: " + model + ", Year: " + year + ", Fuel Type: " + fuelType);
        System.out.println("Payload Capacity: " + payloadCapacity + " tons");
    }
}

class Motorcycle extends Vehicle {
    private boolean hasSidecar;

    public Motorcycle(String make, String model, int year, String fuelType, boolean hasSidecar) {
        super(make, model, year, fuelType);
        this.hasSidecar = hasSidecar;
    }

    public double calculateFuelEfficiency() {
        return 25.0; // Placeholder value
    }

    public void displayDetails() {
        System.out.println("Motorcycle Details:");
        System.out.println("Make: " + make + ", Model: " + model + ", Year: " + year + ", Fuel Type: " + fuelType);
        System.out.println("Has Sidecar: " + (hasSidecar ? "Yes" : "No"));
    }
}

public class Main {
    public static void main(String[] args) {
        Vehicle car = new Car("Toyota", "Corolla", 2020, "Petrol", 4);
        Vehicle truck = new Truck("Volvo", "FH16", 2018, "Diesel", 20.0);
        Vehicle motorcycle = new Motorcycle("Harley-Davidson", "Street 750", 2021, "Petrol", false);

        Vehicle[] vehicles = {car, truck, motorcycle};

        for (Vehicle v : vehicles) {
            v.displayDetails();
            System.out.println("Fuel Efficiency: " + v.calculateFuelEfficiency() + " km/l");
            System.out.println("-------------------------");
        }
    }
}
