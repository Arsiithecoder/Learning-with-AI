import java.util.*;

class Dish {
    private String name;
    private double price;

    public Dish(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() { return name; }

    public double getPrice() { return price; }

    @Override
    public String toString() {
        return name + " - $" + price;
    }
}

class Order {
    private static int idCounter = 1;
    private int orderId;
    private List<Dish> dishes;
    private boolean isCompleted;

    public Order() {
        this.orderId = idCounter++;
        this.dishes = new ArrayList<>();
        this.isCompleted = false;
    }

    public int getOrderId() { return orderId; }

    public void addDish(Dish dish) {
        dishes.add(dish);
    }

    public double calculateTotal() {
        double total = 0;
        for (Dish dish : dishes) {
            total += dish.getPrice();
        }
        return total;
    }

    public void completeOrder() {
        isCompleted = true;
    }

    public boolean isCompleted() { return isCompleted; }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Order ID: ").append(orderId).append("\n");
        for (Dish dish : dishes) {
            sb.append(dish.toString()).append("\n");
        }
        sb.append("Total: $").append(calculateTotal()).append("\n");
        sb.append("Status: ").append(isCompleted ? "Completed" : "In Progress").append("\n");
        return sb.toString();
    }
}

class CafeManagementSystem {
    private List<Dish> menu;
    private List<Order> orders;

    public CafeManagementSystem() {
        menu = new ArrayList<>();
        orders = new ArrayList<>();
    }

    public void addDishToMenu(String name, double price) {
        menu.add(new Dish(name, price));
        System.out.println("Dish added to menu.");
    }

    public void displayMenu() {
        if (menu.isEmpty()) {
            System.out.println("Menu is empty.");
            return;
        }
        System.out.println("Menu:");
        for (int i = 0; i < menu.size(); i++) {
            System.out.println((i + 1) + ". " + menu.get(i).toString());
        }
    }

    public void createOrder(Scanner scanner) {
        if (menu.isEmpty()) {
            System.out.println("Menu is empty. Cannot create order.");
            return;
        }
        Order order = new Order();
        while (true) {
            displayMenu();
            System.out.print("Enter dish number to add to order (0 to finish): ");
            int choice = scanner.nextInt();
            if (choice == 0) break;
            if (choice < 1 || choice > menu.size()) {
                System.out.println("Invalid choice.");
            } else {
                order.addDish(menu.get(choice - 1));
                System.out.println("Dish added to order.");
            }
        }
        if (!order.isCompleted()) {
            orders.add(order);
            System.out.println("Order created with ID: " + order.getOrderId());
        }
    }

    public void displayActiveOrders() {
        boolean hasActive = false;
        for (Order order : orders) {
            if (!order.isCompleted()) {
                System.out.println(order.toString());
                hasActive = true;
            }
        }
        if (!hasActive) {
            System.out.println("No active orders.");
        }
    }

    public void completeOrder(int orderId) {
        for (Order order : orders) {
            if (order.getOrderId() == orderId) {
                if (order.isCompleted()) {
                    System.out.println("Order is already completed.");
                } else {
                    order.completeOrder();
                    System.out.println("Order completed.");
                }
                return;
            }
        }
        System.out.println("Order not found.");
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        CafeManagementSystem cms = new CafeManagementSystem();
        boolean exit = false;

        while (!exit) {
            System.out.println("\nCafe Management System:");
            System.out.println("1. Add dish to menu");
            System.out.println("2. Display menu");
            System.out.println("3. Create new order");
            System.out.println("4. Display active orders");
            System.out.println("5. Complete order");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt
::contentReference[oaicite:35]{index=35}
 
