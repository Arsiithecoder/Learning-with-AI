abstract class BankAccount {
    protected String accountNumber;
    protected double balance;

    public BankAccount(String accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public abstract double calculateInterest();

    public void deposit(double amount) {
        balance += amount;
    }

    public boolean withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            return true;
        }
        return false;
    }

    public String getDetails() {
        return "Account Number: " + accountNumber + ", Balance: $" + balance;
    }
}

class SavingsAccount extends BankAccount {
    private double interestRate;

    public SavingsAccount(String accountNumber, double balance, double interestRate) {
        super(accountNumber, balance);
        this.interestRate = interestRate;
    }

    public double calculateInterest() {
        return balance * interestRate;
    }
}

class CheckingAccount extends BankAccount {
    private double overdraftLimit;

    public CheckingAccount(String accountNumber, double balance, double overdraftLimit) {
        super(accountNumber, balance);
        this.overdraftLimit = overdraftLimit;
    }

    public double calculateInterest() {
        return 0;
    }

    @Override
    public boolean withdraw(double amount) {
        if (balance + overdraftLimit >= amount) {
            balance -= amount;
            return true;
        }
        return false;
    }
}

class FixedDepositAccount extends BankAccount {
    private int depositTerm; // in months
    private double interestRate;
    private boolean termEnded;

    public FixedDepositAccount(String accountNumber, double balance, int depositTerm, double interestRate) {
        super(accountNumber, balance);
        this.depositTerm = depositTerm;
        this.interestRate = interestRate;
        this.termEnded = false;
    }

    public double calculateInterest() {
        return balance * interestRate * (depositTerm / 12.0);
    }

    @Override
    public boolean withdraw(double amount) {
        if (termEnded && balance >= amount) {
            balance -= amount;
            return true;
        }
        return false;
    }

    public void endTerm() {
        termEnded = true;
    }
}

public class Main {
    public static void main(String[] args) {
        BankAccount savings = new SavingsAccount("SA123", 1000.0, 0.05);
        BankAccount checking = new CheckingAccount("CA123", 500.0, 200.0);
        FixedDepositAccount fixedDeposit = new FixedDepositAccount("FD123", 2000.0, 12, 0.06);

        BankAccount[] accounts = {savings, checking, fixedDeposit};

        for (BankAccount account : accounts) {
            System.out.println(account.getDetails());
            System.out.println("Calculated Interest: $" + account.calculateInterest());
            System.out.println("-------------------------");
        }

        // Simulate end of term for fixed deposit
        fixedDeposit.endTerm();
        if (fixedDeposit.withdraw(500.0)) {
            System.out.println("Withdrawal successful from Fixed Deposit Account.");
        } else {
            System.out.println("Withdrawal failed from Fixed Deposit Account.");
        }
    }
}
